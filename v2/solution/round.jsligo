#import "player.jsligo" "Player"
#import "action.jsligo" "Action"
#import "round_value.jsligo" "RoundValue"

export type t = 
    [RoundValue.t, RoundValue.t];

const fresh_round = 
    [RoundValue.waiting, RoundValue.waiting];

export const get_round_value = (round:t, player:Player.t) : RoundValue.t => {
    return match(player, {
        Player1: () => round[0],
        Player2: () => round[1],
    })
};

export const play = (round:t, player:Player.t, action:chest) : t => {
    return match(player, {
        Player1: () => [ RoundValue.play(round[0], action), round[1] ],
        Player2: () => [ round[0], RoundValue.play(round[1], action) ],
    })
};

export const reveal = (round:t, player:Player.t, decode: (chest:chest) => Action.t) : t => {
    return match(player, {
        Player1: () => [ RoundValue.reveal(round[0], decode), round[1] ],
        Player2: () => [ round[0], RoundValue.reveal(round[1], decode) ],
    })
};

export const is_waiting = (round:t, player:Player.t): bool => 
    RoundValue.is_waiting(get_round_value(round, player));

export const is_played = (round:t, player:Player.t): bool => 
    RoundValue.is_played(get_round_value(round, player));

export const is_revealed = (round:t, player:Player.t): bool => 
    RoundValue.is_revealed(get_round_value(round, player));
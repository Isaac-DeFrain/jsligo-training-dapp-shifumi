#import "errors.jsligo" "Errors"
#import "action.jsligo" "Action"
#import "storage.jsligo" "Storage"

const play = (storage:Storage.t, player:address, action: Action.t) : Storage.t => {
    const round = Storage.current_round(storage);

    if (Storage.is_player1(storage, player) && Storage.is_waiting(round.player1)) {
        return Storage.update_round(storage, Storage.player1_play(round, action));
    } else if (Storage.is_player2(storage, player) && Storage.is_waiting(round.player2)) {
        return Storage.update_round(storage, Storage.player2_play(round, action));
    } else {
        return (failwith(Errors.user_not_allowed_to_play));
    };
};

const conclude = (storage:Storage.t): [list<operation>, Storage.t] => {
    const round = Storage.current_round(storage);

    if (Storage.is_played(round.player1) && Storage.is_played(round.player2)) {
        return [list([]) as list<operation>, Storage.new_game(storage)];
    } else {
        return [list([]) as list<operation>, storage];
    }
};

export type parameter = | ["Play", Action.t];

export const main = ([parameter,storage]:[parameter, Storage.t]) : [list<operation>, Storage.t] => {
    match(parameter, {
        Play : p => conclude(play(storage, Tezos.sender, p))
    });
};

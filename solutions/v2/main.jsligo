#import "errors.jsligo" "Errors"
#import "action.jsligo" "Action"
#import "storage.jsligo" "Storage"

const play = ([storage, player, action]:[Storage.t, address, chest]) : [list<operation>, Storage.t] => {
    const round = Storage.current_round(storage);

    if (Storage.is_player1(storage, player) && Storage.is_waiting(round.player1)) {
        return [list([]) as list<operation>, Storage.update_round(storage, Storage.player1_play(round, action))];
    } else if (Storage.is_player2(storage, player) && Storage.is_waiting(round.player2)) {
        return [list([]) as list<operation>, Storage.update_round(storage, Storage.player2_play(round, action))];
    } else {
        return failwith(Errors.user_not_allowed_to_play);
    };
};

export const reveal = ([storage, player, chest_key, secret]:[Storage.t, address, chest_key, nat]) : Storage.t => {
    const round = Storage.current_round(storage);

    if (Storage.is_waiting(Storage.round_value_player1(round)) || Storage.is_waiting(Storage.round_value_player2(round))) {
        return failwith(Errors.user_not_allowed_to_reveal);
    } else if (Storage.is_player1(storage, player) && Storage.is_played(Storage.round_value_player1(round))) {
        return Storage.update_round(storage, Storage.player1_reveal(round, chest_key, secret));
    } else if (Storage.is_player2(storage, player) && Storage.is_played(Storage.round_value_player2(round))) {
        return Storage.update_round(storage, Storage.player2_reveal(round, chest_key, secret));
    } else {
        return failwith(Errors.user_not_allowed_to_reveal);
    };
};

export const conclude = (storage:Storage.t): [list<operation>, Storage.t] => {
    const round = Storage.current_round(storage);

    if (Storage.is_revealed(Storage.round_value_player1(round)) && Storage.is_revealed(Storage.round_value_player2(round))) {
        return [list([]) as list<operation>, Storage.new_game(storage)];
    } else {
        return [list([]) as list<operation>, storage];
    }
};

export type parameter = ["Play", chest] | ["Reveal", [chest_key, nat]];

export const main = (parameter: parameter, storage: Storage.t) : [list<operation>, Storage.t] => {
    match(parameter, {
        Play   : p => play(storage, Tezos.sender, p),
        Reveal : p => conclude(reveal(storage, Tezos.sender, p[0], p[1])),
    });    
};

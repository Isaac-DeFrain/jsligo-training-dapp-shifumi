#import "utils/options.jsligo" "Options"
#import "utils/chest.jsligo" "Chest"
#import "errors.jsligo" "Errors"
#import "player.jsligo" "Player"
#import "action.jsligo" "Action"
#import "round_value.jsligo" "RoundValue"
#import "round.jsligo" "Round"
#import "storage.jsligo" "Storage"

const play = ([storage, player_address, action, amount] : [Storage.t, address, chest, tez]) : Storage.t => {
    const round = Options.get_exn(Storage.get_current_round(storage), Errors.invalid_round);
    const player = Options.get_exn(Storage.get_player(storage, player_address), Errors.user_not_allowed_to_play);

    if (Round.is_waiting(round, player)) {
        return Storage.update_round(storage, Round.play(round, player, action, amount));
    } else {
        return failwith(Errors.user_not_allowed_to_play);
    };
};

const reveal = ([storage, player_address, chest_key, secret] : [Storage.t, address, chest_key, nat]) : Storage.t => {
    const round = Options.get_exn(Storage.get_current_round(storage), Errors.invalid_round);
    const p = Options.get_exn(Storage.get_player(storage, player_address), Errors.user_not_allowed_to_play);
    const p1 = Options.get_exn(Storage.get_player(storage, storage.players[0]), Errors.user_not_allowed_to_play);
    const p2 = Options.get_exn(Storage.get_player(storage, storage.players[1]), Errors.user_not_allowed_to_play);

    if (Round.is_waiting(round, p1) || Round.is_waiting(round, p2)) {
        return failwith(Errors.user_not_allowed_to_reveal);
    } else if (Round.is_played(round, p)) {
        return Storage.update_round(storage, Round.reveal(round, p, Chest.decoder(chest_key, secret) as Chest.decoder));
    } else {
        return failwith(Errors.user_not_allowed_to_reveal);
    };
};

export const conclude = (storage: Storage.t) : [list<operation>, Storage.t] => {
    const get_contract = (address: address): contract<unit> =>
        (Tezos.get_contract(address) as contract<unit>);

    const round = Options.get_exn(Storage.get_current_round(storage), Errors.invalid_round);
    const actions = Options.get_exn(RoundValue.get_revealed(round[0], round[1]), Errors.cannot_conclude);
    const p1 = Options.get_exn(Storage.get_player(storage, storage.players[0]), Errors.user_not_allowed_to_play);
    const p2 = Options.get_exn(Storage.get_player(storage, storage.players[1]), Errors.user_not_allowed_to_play);

    const decide_stone = (a: Action.t) : option<Player.t> => {
        return match(a, {
            Stone: () => None(),
            Paper: () => Some(Player.player2),
            Scissor: () => Some(Player.player1)
        })
    };

    const decide_paper = (a: Action.t) : option<Player.t> => {
        return match(a, {
            Stone: () => Some(Player.player1),
            Paper: () => None(),
            Scissor: () => Some(Player.player2)
        })
    };

    const decide_scissor = (a: Action.t) : option<Player.t> => {
        return match(a, {
            Stone: () => Some(Player.player2),
            Paper: () => Some(Player.player1),
            Scissor: () => None()
        })
    };

    const decide = (storage: Storage.t, a1: Action.t, a2: Action.t) : option<address> => {
        let decision: option<Player.t> = match(a1, {
            Stone: () => decide_stone(a2),
            Paper: () => decide_paper(a2),
            Scissor: () => decide_scissor(a2)
        });
        Option.map((p: Player.t) => Storage.get_address(storage, p), decision)
    };

    if (Round.is_revealed(round, p1) && Round.is_revealed(round, p2)) {
        return match(decide(storage, actions.player1[0], actions.player2[0]), {
            // tie => refund each player
            None: () => [
                list([
                    Tezos.transaction(unit, actions.player1[1], get_contract(Storage.get_address(storage, Player.player1))),
                    Tezos.transaction(unit, actions.player2[1], get_contract(Storage.get_address(storage, Player.player2)))
                ]),
                Storage.new_game(storage)
            ],
            // winning address takes all
            Some: address => {
                let amount: tez = actions.player1[1] + actions.player2[1];
                [ list([Tezos.transaction(unit, amount, get_contract(address))]), Storage.new_game(storage) ]
            }
        });
    } else {
        return failwith(Errors.cannot_conclude);
    }
};

export type parameter = 
| ["Play", chest]
| ["Reveal", chest_key, nat]
| ["Conclude"];

export const main = (parameter: parameter, storage: Storage.t) : [list<operation>, Storage.t] => {
    match(parameter, {
        Play   : p => [list([]) as list<operation>, play(storage, Tezos.get_sender(), p, Tezos.get_amount())],
        Reveal : p => [list([]) as list<operation>, reveal(storage, Tezos.get_sender(), p[0], p[1])],
        Conclude : () => conclude(storage)
    })
};
